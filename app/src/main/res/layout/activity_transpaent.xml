<?xml version="1.0" encoding="utf-8"?>
<FrameLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:background="@color/black"
    android:layout_height="match_parent">

    <com.returntolife.jjcode.mydemolist.demo.widget.transparent.TransparentView
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <TextView
            android:layout_width="match_parent"
            android:textSize="14sp"
            android:textColor="@color/white"
            android:text="前言
上一篇文章对协程的概念和原理、协程框架的基础使用、挂起函数以及挂起与恢复等做了详细的分析，如果您对协程有一定的理解，可以阅读《Kotlin 协程实战进阶(一、筑基篇)》我们来对协程整体认识来做一个整体的交流。由于篇幅原因还有一部分重要的知识点没有讲解到，接下来继续分析 Kotlin 协程的重要要素和使用，首先来回顾一下上篇文章的整体内容：

1、Coroutine：协程的概念和原理：协程是什么以及它的作用和特点，图解分析协程的工作原理。
2、Coroutine builders：协程的构建，协程构建器创建协程的三种方式。
3、CoroutineScope：协程作用域，协程运行的上下文环境，用来提供函数支持，也是用来增加限制。常见的7种作用域（包含Lifecycle支持的协程）以及作用域的分类和行为规则。
4、Job  Deferred：协程的句柄，实现对协程的控制和管理，Deferred有返回值。
5、CoroutineDispatcher：协程调度器,确定相应的协程在那个线程上执行，调度器的四种模式以及withContext主要是为了切换协程上下文环境。
6、CoroutineContext：协程上下文，表示协程的运行环境，包括协程调度器、代表协程本身的Job、协程名称、协程ID以及组合上下文的使用。
7、CoroutineStart：一个枚举类，为协程构建器定义四中启动模式。
8、suspend：挂起函数，Kotlin 协程最核心的关键字。一种避免阻塞线程并用更简单、更可控的操作替代线程阻塞的方法：协程挂起和恢复。
本文大纲前言
上一篇文章对协程的概念和原理、协程框架的基础使用、挂起函数以及挂起与恢复等做了详细的分析，如果您对协程有一定的理解，可以阅读《Kotlin 协程实战进阶(一、筑基篇)》我们来对协程整体认识来做一个整体的交流。由于篇幅原因还有一部分重要的知识点没有讲解到，接下来继续分析 Kotlin 协程的重要要素和使用，首先来回顾一下上篇文章的整体内容：

1、Coroutine：协程的概念和原理：协程是什么以及它的作用和特点，图解分析协程的工作原理。
2、Coroutine builders：协程的构建，协程构建器创建协程的三种方式。
3、CoroutineScope：协程作用域，协程运行的上下文环境，用来提供函数支持，也是用来增加限制。常见的7种作用域（包含Lifecycle支持的协程）以及作用域的分类和行为规则。
4、Job  Deferred：协程的句柄，实现对协程的控制和管理，Deferred有返回值。
5、CoroutineDispatcher：协程调度器,确定相应的协程在那个线程上执行，调度器的四种模式以及withContext主要是为了切换协程上下文环境。
6、CoroutineContext：协程上下文，表示协程的运行环境，包括协程调度器、代表协程本身的Job、协程名称、协程ID以及组合上下文的使用。
7、CoroutineStart：一个枚举类，为协程构建器定义四中启动模式。
8、suspend：挂起函数，Kotlin 协程最核心的关键字。一种避免阻塞线程并用更简单、更可控的操作替代线程阻塞的方法：协程挂起和恢复。
本文大纲前言
上一篇文章对协程的概念和原理、协程框架的基础使用、挂起函数以及挂起与恢复等做了详细的分析，如果您对协程有一定的理解，可以阅读《Kotlin 协程实战进阶(一、筑基篇)》我们来对协程整体认识来做一个整体的交流。由于篇幅原因还有一部分重要的知识点没有讲解到，接下来继续分析 Kotlin 协程的重要要素和使用，首先来回顾一下上篇文章的整体内容：

1、Coroutine：协程的概念和原理：协程是什么以及它的作用和特点，图解分析协程的工作原理。
2、Coroutine builders：协程的构建，协程构建器创建协程的三种方式。
3、CoroutineScope：协程作用域，协程运行的上下文环境，用来提供函数支持，也是用来增加限制。常见的7种作用域（包含Lifecycle支持的协程）以及作用域的分类和行为规则。
4、Job  Deferred：协程的句柄，实现对协程的控制和管理，Deferred有返回值。
5、CoroutineDispatcher：协程调度器,确定相应的协程在那个线程上执行，调度器的四种模式以及withContext主要是为了切换协程上下文环境。
6、CoroutineContext：协程上下文，表示协程的运行环境，包括协程调度器、代表协程本身的Job、协程名称、协程ID以及组合上下文的使用。
7、CoroutineStart：一个枚举类，为协程构建器定义四中启动模式。
8、suspend：挂起函数，Kotlin 协程最核心的关键字。一种避免阻塞线程并用更简单、更可控的操作替代线程阻塞的方法：协程挂起和恢复。
本文大纲前言
上一篇文章对协程的概念和原理、协程框架的基础使用、挂起函数以及挂起与恢复等做了详细的分析，如果您对协程有一定的理解，可以阅读《Kotlin 协程实战进阶(一、筑基篇)》我们来对协程整体认识来做一个整体的交流。由于篇幅原因还有一部分重要的知识点没有讲解到，接下来继续分析 Kotlin 协程的重要要素和使用，首先来回顾一下上篇文章的整体内容：

1、Coroutine：协程的概念和原理：协程是什么以及它的作用和特点，图解分析协程的工作原理。
2、Coroutine builders：协程的构建，协程构建器创建协程的三种方式。
3、CoroutineScope：协程作用域，协程运行的上下文环境，用来提供函数支持，也是用来增加限制。常见的7种作用域（包含Lifecycle支持的协程）以及作用域的分类和行为规则。
4、Job  Deferred：协程的句柄，实现对协程的控制和管理，Deferred有返回值。
5、CoroutineDispatcher：协程调度器,确定相应的协程在那个线程上执行，调度器的四种模式以及withContext主要是为了切换协程上下文环境。
6、CoroutineContext：协程上下文，表示协程的运行环境，包括协程调度器、代表协程本身的Job、协程名称、协程ID以及组合上下文的使用。
7、CoroutineStart：一个枚举类，为协程构建器定义四中启动模式。
8、suspend：挂起函数，Kotlin 协程最核心的关键字。一种避免阻塞线程并用更简单、更可控的操作替代线程阻塞的方法：协程挂起和恢复。
本文大纲前言
上一篇文章对协程的概念和原理、协程框架的基础使用、挂起函数以及挂起与恢复等做了详细的分析，如果您对协程有一定的理解，可以阅读《Kotlin 协程实战进阶(一、筑基篇)》我们来对协程整体认识来做一个整体的交流。由于篇幅原因还有一部分重要的知识点没有讲解到，接下来继续分析 Kotlin 协程的重要要素和使用，首先来回顾一下上篇文章的整体内容：

1、Coroutine：协程的概念和原理：协程是什么以及它的作用和特点，图解分析协程的工作原理。
2、Coroutine builders：协程的构建，协程构建器创建协程的三种方式。
3、CoroutineScope：协程作用域，协程运行的上下文环境，用来提供函数支持，也是用来增加限制。常见的7种作用域（包含Lifecycle支持的协程）以及作用域的分类和行为规则。
4、Job  Deferred：协程的句柄，实现对协程的控制和管理，Deferred有返回值。
5、CoroutineDispatcher：协程调度器,确定相应的协程在那个线程上执行，调度器的四种模式以及withContext主要是为了切换协程上下文环境。
6、CoroutineContext：协程上下文，表示协程的运行环境，包括协程调度器、代表协程本身的Job、协程名称、协程ID以及组合上下文的使用。
7、CoroutineStart：一个枚举类，为协程构建器定义四中启动模式。
8、suspend：挂起函数，Kotlin 协程最核心的关键字。一种避免阻塞线程并用更简单、更可控的操作替代线程阻塞的方法：协程挂起和恢复。
本文大纲前言
上一篇文章对协程的概念和原理、协程框架的基础使用、挂起函数以及挂起与恢复等做了详细的分析，如果您对协程有一定的理解，可以阅读《Kotlin 协程实战进阶(一、筑基篇)》我们来对协程整体认识来做一个整体的交流。由于篇幅原因还有一部分重要的知识点没有讲解到，接下来继续分析 Kotlin 协程的重要要素和使用，首先来回顾一下上篇文章的整体内容：

1、Coroutine：协程的概念和原理：协程是什么以及它的作用和特点，图解分析协程的工作原理。
2、Coroutine builders：协程的构建，协程构建器创建协程的三种方式。
3、CoroutineScope：协程作用域，协程运行的上下文环境，用来提供函数支持，也是用来增加限制。常见的7种作用域（包含Lifecycle支持的协程）以及作用域的分类和行为规则。
4、Job  Deferred：协程的句柄，实现对协程的控制和管理，Deferred有返回值。
5、CoroutineDispatcher：协程调度器,确定相应的协程在那个线程上执行，调度器的四种模式以及withContext主要是为了切换协程上下文环境。
6、CoroutineContext：协程上下文，表示协程的运行环境，包括协程调度器、代表协程本身的Job、协程名称、协程ID以及组合上下文的使用。
7、CoroutineStart：一个枚举类，为协程构建器定义四中启动模式。
8、suspend：挂起函数，Kotlin 协程最核心的关键字。一种避免阻塞线程并用更简单、更可控的操作替代线程阻塞的方法：协程挂起和恢复。
本文大纲前言
上一篇文章对协程的概念和原理、协程框架的基础使用、挂起函数以及挂起与恢复等做了详细的分析，如果您对协程有一定的理解，可以阅读《Kotlin 协程实战进阶(一、筑基篇)》我们来对协程整体认识来做一个整体的交流。由于篇幅原因还有一部分重要的知识点没有讲解到，接下来继续分析 Kotlin 协程的重要要素和使用，首先来回顾一下上篇文章的整体内容：

1、Coroutine：协程的概念和原理：协程是什么以及它的作用和特点，图解分析协程的工作原理。
2、Coroutine builders：协程的构建，协程构建器创建协程的三种方式。
3、CoroutineScope：协程作用域，协程运行的上下文环境，用来提供函数支持，也是用来增加限制。常见的7种作用域（包含Lifecycle支持的协程）以及作用域的分类和行为规则。
4、Job  Deferred：协程的句柄，实现对协程的控制和管理，Deferred有返回值。
5、CoroutineDispatcher：协程调度器,确定相应的协程在那个线程上执行，调度器的四种模式以及withContext主要是为了切换协程上下文环境。
6、CoroutineContext：协程上下文，表示协程的运行环境，包括协程调度器、代表协程本身的Job、协程名称、协程ID以及组合上下文的使用。
7、CoroutineStart：一个枚举类，为协程构建器定义四中启动模式。
8、suspend：挂起函数，Kotlin 协程最核心的关键字。一种避免阻塞线程并用更简单、更可控的操作替代线程阻塞的方法：协程挂起和恢复。
本文大纲前言
上一篇文章对协程的概念和原理、协程框架的基础使用、挂起函数以及挂起与恢复等做了详细的分析，如果您对协程有一定的理解，可以阅读《Kotlin 协程实战进阶(一、筑基篇)》我们来对协程整体认识来做一个整体的交流。由于篇幅原因还有一部分重要的知识点没有讲解到，接下来继续分析 Kotlin 协程的重要要素和使用，首先来回顾一下上篇文章的整体内容：

1、Coroutine：协程的概念和原理：协程是什么以及它的作用和特点，图解分析协程的工作原理。
2、Coroutine builders：协程的构建，协程构建器创建协程的三种方式。
3、CoroutineScope：协程作用域，协程运行的上下文环境，用来提供函数支持，也是用来增加限制。常见的7种作用域（包含Lifecycle支持的协程）以及作用域的分类和行为规则。
4、Job  Deferred：协程的句柄，实现对协程的控制和管理，Deferred有返回值。
5、CoroutineDispatcher：协程调度器,确定相应的协程在那个线程上执行，调度器的四种模式以及withContext主要是为了切换协程上下文环境。
6、CoroutineContext：协程上下文，表示协程的运行环境，包括协程调度器、代表协程本身的Job、协程名称、协程ID以及组合上下文的使用。
7、CoroutineStart：一个枚举类，为协程构建器定义四中启动模式。
8、suspend：挂起函数，Kotlin 协程最核心的关键字。一种避免阻塞线程并用更简单、更可控的操作替代线程阻塞的方法：协程挂起和恢复。
本文大纲前言
上一篇文章对协程的概念和原理、协程框架的基础使用、挂起函数以及挂起与恢复等做了详细的分析，如果您对协程有一定的理解，可以阅读《Kotlin 协程实战进阶(一、筑基篇)》我们来对协程整体认识来做一个整体的交流。由于篇幅原因还有一部分重要的知识点没有讲解到，接下来继续分析 Kotlin 协程的重要要素和使用，首先来回顾一下上篇文章的整体内容：

1、Coroutine：协程的概念和原理：协程是什么以及它的作用和特点，图解分析协程的工作原理。
2、Coroutine builders：协程的构建，协程构建器创建协程的三种方式。
3、CoroutineScope：协程作用域，协程运行的上下文环境，用来提供函数支持，也是用来增加限制。常见的7种作用域（包含Lifecycle支持的协程）以及作用域的分类和行为规则。
4、Job  Deferred：协程的句柄，实现对协程的控制和管理，Deferred有返回值。
5、CoroutineDispatcher：协程调度器,确定相应的协程在那个线程上执行，调度器的四种模式以及withContext主要是为了切换协程上下文环境。
6、CoroutineContext：协程上下文，表示协程的运行环境，包括协程调度器、代表协程本身的Job、协程名称、协程ID以及组合上下文的使用。
7、CoroutineStart：一个枚举类，为协程构建器定义四中启动模式。
8、suspend：挂起函数，Kotlin 协程最核心的关键字。一种避免阻塞线程并用更简单、更可控的操作替代线程阻塞的方法：协程挂起和恢复。
本文大纲前言
上一篇文章对协程的概念和原理、协程框架的基础使用、挂起函数以及挂起与恢复等做了详细的分析，如果您对协程有一定的理解，可以阅读《Kotlin 协程实战进阶(一、筑基篇)》我们来对协程整体认识来做一个整体的交流。由于篇幅原因还有一部分重要的知识点没有讲解到，接下来继续分析 Kotlin 协程的重要要素和使用，首先来回顾一下上篇文章的整体内容：

1、Coroutine：协程的概念和原理：协程是什么以及它的作用和特点，图解分析协程的工作原理。
2、Coroutine builders：协程的构建，协程构建器创建协程的三种方式。
3、CoroutineScope：协程作用域，协程运行的上下文环境，用来提供函数支持，也是用来增加限制。常见的7种作用域（包含Lifecycle支持的协程）以及作用域的分类和行为规则。
4、Job  Deferred：协程的句柄，实现对协程的控制和管理，Deferred有返回值。
5、CoroutineDispatcher：协程调度器,确定相应的协程在那个线程上执行，调度器的四种模式以及withContext主要是为了切换协程上下文环境。
6、CoroutineContext：协程上下文，表示协程的运行环境，包括协程调度器、代表协程本身的Job、协程名称、协程ID以及组合上下文的使用。
7、CoroutineStart：一个枚举类，为协程构建器定义四中启动模式。
8、suspend：挂起函数，Kotlin 协程最核心的关键字。一种避免阻塞线程并用更简单、更可控的操作替代线程阻塞的方法：协程挂起和恢复。
本文大纲前言
上一篇文章对协程的概念和原理、协程框架的基础使用、挂起函数以及挂起与恢复等做了详细的分析，如果您对协程有一定的理解，可以阅读《Kotlin 协程实战进阶(一、筑基篇)》我们来对协程整体认识来做一个整体的交流。由于篇幅原因还有一部分重要的知识点没有讲解到，接下来继续分析 Kotlin 协程的重要要素和使用，首先来回顾一下上篇文章的整体内容：

1、Coroutine：协程的概念和原理：协程是什么以及它的作用和特点，图解分析协程的工作原理。
2、Coroutine builders：协程的构建，协程构建器创建协程的三种方式。
3、CoroutineScope：协程作用域，协程运行的上下文环境，用来提供函数支持，也是用来增加限制。常见的7种作用域（包含Lifecycle支持的协程）以及作用域的分类和行为规则。
4、Job  Deferred：协程的句柄，实现对协程的控制和管理，Deferred有返回值。
5、CoroutineDispatcher：协程调度器,确定相应的协程在那个线程上执行，调度器的四种模式以及withContext主要是为了切换协程上下文环境。
6、CoroutineContext：协程上下文，表示协程的运行环境，包括协程调度器、代表协程本身的Job、协程名称、协程ID以及组合上下文的使用。
7、CoroutineStart：一个枚举类，为协程构建器定义四中启动模式。
8、suspend：挂起函数，Kotlin 协程最核心的关键字。一种避免阻塞线程并用更简单、更可控的操作替代线程阻塞的方法：协程挂起和恢复。
本文大纲前言
上一篇文章对协程的概念和原理、协程框架的基础使用、挂起函数以及挂起与恢复等做了详细的分析，如果您对协程有一定的理解，可以阅读《Kotlin 协程实战进阶(一、筑基篇)》我们来对协程整体认识来做一个整体的交流。由于篇幅原因还有一部分重要的知识点没有讲解到，接下来继续分析 Kotlin 协程的重要要素和使用，首先来回顾一下上篇文章的整体内容：

1、Coroutine：协程的概念和原理：协程是什么以及它的作用和特点，图解分析协程的工作原理。
2、Coroutine builders：协程的构建，协程构建器创建协程的三种方式。
3、CoroutineScope：协程作用域，协程运行的上下文环境，用来提供函数支持，也是用来增加限制。常见的7种作用域（包含Lifecycle支持的协程）以及作用域的分类和行为规则。
4、Job  Deferred：协程的句柄，实现对协程的控制和管理，Deferred有返回值。
5、CoroutineDispatcher：协程调度器,确定相应的协程在那个线程上执行，调度器的四种模式以及withContext主要是为了切换协程上下文环境。
6、CoroutineContext：协程上下文，表示协程的运行环境，包括协程调度器、代表协程本身的Job、协程名称、协程ID以及组合上下文的使用。
7、CoroutineStart：一个枚举类，为协程构建器定义四中启动模式。
8、suspend：挂起函数，Kotlin 协程最核心的关键字。一种避免阻塞线程并用更简单、更可控的操作替代线程阻塞的方法：协程挂起和恢复。
本文大纲"
            android:layout_height="match_parent"/>

    </com.returntolife.jjcode.mydemolist.demo.widget.transparent.TransparentView>
</FrameLayout>
